//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace QPMLinksoftwareNew.QPMSpec {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Config1Binding", Namespace="urn:SpecWsd/Config1")]
    public partial class Spec : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback addOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLatestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Spec() {
            this.Url = global::QPMLinksoftwareNew.Properties.Settings.Default.QPMLinksoftwareNew_QPMSpec_Spec;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event addCompletedEventHandler addCompleted;
        
        /// <remarks/>
        public event getLatestCompletedEventHandler getLatestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="urn:SpecVi", ResponseNamespace="urn:SpecVi", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Response", IsNullable=true)]
        public string add(
                    int mandant, 
                    int processId, 
                    int depPropId, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string depPropValue, 
                    int propNameId, 
                    int tsNameId, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string start, 
                    double lil, 
                    double lsl, 
                    double lcl, 
                    double target, 
                    double ucl, 
                    double usl, 
                    double uil, 
                    int sampleSize, 
                    int status) {
            object[] results = this.Invoke("add", new object[] {
                        mandant,
                        processId,
                        depPropId,
                        depPropValue,
                        propNameId,
                        tsNameId,
                        start,
                        lil,
                        lsl,
                        lcl,
                        target,
                        ucl,
                        usl,
                        uil,
                        sampleSize,
                        status});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void addAsync(
                    int mandant, 
                    int processId, 
                    int depPropId, 
                    string depPropValue, 
                    int propNameId, 
                    int tsNameId, 
                    string start, 
                    double lil, 
                    double lsl, 
                    double lcl, 
                    double target, 
                    double ucl, 
                    double usl, 
                    double uil, 
                    int sampleSize, 
                    int status) {
            this.addAsync(mandant, processId, depPropId, depPropValue, propNameId, tsNameId, start, lil, lsl, lcl, target, ucl, usl, uil, sampleSize, status, null);
        }
        
        /// <remarks/>
        public void addAsync(
                    int mandant, 
                    int processId, 
                    int depPropId, 
                    string depPropValue, 
                    int propNameId, 
                    int tsNameId, 
                    string start, 
                    double lil, 
                    double lsl, 
                    double lcl, 
                    double target, 
                    double ucl, 
                    double usl, 
                    double uil, 
                    int sampleSize, 
                    int status, 
                    object userState) {
            if ((this.addOperationCompleted == null)) {
                this.addOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddOperationCompleted);
            }
            this.InvokeAsync("add", new object[] {
                        mandant,
                        processId,
                        depPropId,
                        depPropValue,
                        propNameId,
                        tsNameId,
                        start,
                        lil,
                        lsl,
                        lcl,
                        target,
                        ucl,
                        usl,
                        uil,
                        sampleSize,
                        status}, this.addOperationCompleted, userState);
        }
        
        private void OnaddOperationCompleted(object arg) {
            if ((this.addCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addCompleted(this, new addCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="urn:SpecVi", ResponseNamespace="urn:SpecVi", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("Response", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("String", Namespace="urn:java/lang")]
        public string[] getLatest(int mandant, int processId, int depPropId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string depPropValue, int propNameId, int tsNameId) {
            object[] results = this.Invoke("getLatest", new object[] {
                        mandant,
                        processId,
                        depPropId,
                        depPropValue,
                        propNameId,
                        tsNameId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getLatestAsync(int mandant, int processId, int depPropId, string depPropValue, int propNameId, int tsNameId) {
            this.getLatestAsync(mandant, processId, depPropId, depPropValue, propNameId, tsNameId, null);
        }
        
        /// <remarks/>
        public void getLatestAsync(int mandant, int processId, int depPropId, string depPropValue, int propNameId, int tsNameId, object userState) {
            if ((this.getLatestOperationCompleted == null)) {
                this.getLatestOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLatestOperationCompleted);
            }
            this.InvokeAsync("getLatest", new object[] {
                        mandant,
                        processId,
                        depPropId,
                        depPropValue,
                        propNameId,
                        tsNameId}, this.getLatestOperationCompleted, userState);
        }
        
        private void OngetLatestOperationCompleted(object arg) {
            if ((this.getLatestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLatestCompleted(this, new getLatestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void addCompletedEventHandler(object sender, addCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void getLatestCompletedEventHandler(object sender, getLatestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLatestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLatestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591